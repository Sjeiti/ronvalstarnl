{
  "id": 3465,
  "date": "2018-12-24T15:16:38",
  "date_gmt": "2018-12-24T15:16:38",
  "guid": {
    "rendered": "http://ronvalstar.nl/?p=3465"
  },
  "modified": "2018-12-24T15:16:46",
  "modified_gmt": "2018-12-24T15:16:46",
  "slug": "updating-a-cypress-alias",
  "status": "publish",
  "type": "post",
  "link": "https://ronvalstar.nl/updating-a-cypress-alias",
  "title": {
    "rendered": "Updating a Cypress alias"
  },
  "content": {
    "rendered": "<p><small>TLDR: a Cypress command script to update DOM aliases by traversing up the selector tree.</small></p>\n<p><a href=\"https://docs.cypress.io/api/commands/as.html\" target=\"_blank\">Aliasing DOM selections</a> is a really handy Cypress feature. It not only makes your code dryer, it also makes it easier to read.<br />\nYou set it like this <code>cy.get('li').as('entries')</code> and further down your code use it like so <code>cy.get('@entries')</code>.<br />\nThat might not look like much of an improvement but you could have a selector that looks like this <code>main [data-entries] li</code> or even a cypress <em>get</em> like this <code>cy.get('@main').find('[data-entries] li')</code>.<br />\nSo you see what I&#8217;m getting at.</p>\n<p>There is one small downside though (or an upside depending on you point of view). The alias is a snapshot of the DOM state at the time the alias was created. So if you have an x number of entries and do some testing that would increase the number of entries you are out of luck because the alias still points to the initial result.</p>\n<h2>update aliases along the way</h2>\n<p>You can easily update the alias though. If you call <code>cy.get('li').as('entries')</code> after your DOM changes the <code>get('@entries')</code> alias wil have updated to the new state. But at that point the alias has become somewhat pointless: it would be easier to just always do <code>cy.get('some very lengthy selector')</code> and forget about aliases. We can always put the selector string into a variable and use that.</p>\n<h2>a custom command that updates</h2>\n<p>There is a way if you dig a little. When you take a closer look at what <code>cy.get</code> yields you&#8217;ll notice that it is a jQuery object. And a jQuery selector object has two handy properties <code>selector</code> and <code>prevObject</code>.<br />\nThe <em>selector</em> property is a string with the last (sub) selection. So for <code>cy.get('ul').find('li')</code> that would be &#8216;li&#8217;.<br />\nAnd <em>prevObject</em> is another jQuery object. In the previous example it would contain <em>selector: &#8216;ul&#8217;</em>. PrevObject in fact chains al the way up until the last object that does <em>not</em> contain a prevObject property, which refers to <code>document</code>.</p>\n<p>So that chain contains all the data we need to be able to update an alias.<br />\nAnd Cypress makes it quite easy because we can build or own commands.</p>\n<pre><code class=\"language-javascript \">Cypress.Commands.add('updateAlias', domAlias =&gt; {\n    // first we retreive the alias name, domAlias without the @\n    const aliasName = (domAlias.match(/^@(.*)$/)||[])[1]\n    return aliasName&amp;&amp;cy.get(domAlias).then($result =&gt; {\n        const tree = [$result] // initial $result is the last branch on the tree\n        // we travel up the prevObjects and prepend/unshift to the tree\n        while (tree[0].prevObject) tree.unshift(tree[0].prevObject)\n        // chain `find` onto documentElement and recreate the alias\n        return tree.reduce(((cy,o)=&gt;cy.find(o.selector)),cy.wrap(tree.shift().get(0).documentElement)).as(aliasName)\n    })||cy.get(domAlias) // if no alias name exists proceed with normal get\n})\n</code></pre>\n<h2>adding update option by overwriting <code>get</code> command</h2>\n<p>But a different command does break the reading flow a bit.<br />\nWhat we could do is overwrite the <code>get</code> method to make it accept an update boolean. Because Cypress comes with a really handy mechanism <code>Cypress.Commands.overwrite(name, callbackFn)</code>.</p>\n<pre><code class=\"language-javascript \">Cypress.Commands.overwrite('get', (orig, selector, options={}) =&gt; {\n  const aliasName = (selector.match(/^@(.*)$/)||[])[1]\n  return aliasName&amp;&amp;options.update?cy.updateAlias(selector,options):orig(selector, options)\n})\n</code></pre>\n<h2>adding live option by overwriting <code>as</code> command</h2>\n<p>Or we could try to overwrite <code>as</code> to accept a boolean that always forces <code>get</code> to update.<br />\nThis is a bit more difficult than it seems. The <code>as</code> command does not normally accept an options object plus you&#8217;d have to overwrite the <code>get</code> command as well to play nice with the added feature. But there is no obvious way to access aliases from with overwritten command so you&#8217;d have to track the newly added <code>as</code> option yourself by mapping it to the alias.<br />\nThen, since the overwritten <code>get</code> will call your new <code>updateAlias</code> command which in turn can call <code>get</code> you risk running a stackoverflow. So we let the <code>updateAlias</code> command always call <code>get</code> with an extra <code>ignoreLive</code> boolean so we will know when <code>get</code> is called from within <code>updateAlias</code> and not call it again (by skipping the <code>isLive</code> check in there).</p>\n<pre><code class=\"language-javascript \">// the array in which we track which aliases are created with the live option\nconst asLive = []\n\n/**\n * Use regex to find alias name * @param {string} selector\n * @returns {string}\n */\nfunction getAliasName(selector){\n  return (selector.match(/^@(.*)$/)||[])[1]\n}\n\n/**\n * Return the element itself if it does not have a documentElement reference * @param {HTMLElement} elm\n * @returns {HTMLElement}\n */\nfunction getDocumentElement(elm) {\n  return elm.documentElement||elm\n}\n\nCypress.Commands.add('updateAlias', (domAlias, options) =&gt; {\n  const aliasName = getAliasName(domAlias)\n  // `cy.get` is called with `ignoreLive` set to true\n  return aliasName&amp;&amp;cy.get(domAlias,{ignoreLive:true}).then($result =&gt; {\n      const tree = [$result]\n      while (tree[0].prevObject) tree.unshift(tree[0].prevObject)\n  return tree.reduce(((cy,o)=&gt;cy.find(o.selector)),cy.wrap(getDocumentElement(tree.shift().get(0)))).as(aliasName)\n  })||cy.get(domAlias, options)\n})\n\nCypress.Commands.overwrite('get', (orig, selector, options={}) =&gt; {\n  const {update, ignoreLive} = options\n  const aliasName = getAliasName(selector)\n  // only check the `asLive` array for the alias when `ignoreLive` is not set\n  const isLive = aliasName &amp;&amp; !ignoreLive &amp;&amp; asLive.includes(aliasName)\n  // only update valid alias names when `update` is set or when alias is live\n  return aliasName&amp;&amp;(update||isLive)?cy.updateAlias(selector,options):orig(selector, options)\n})\n\nCypress.Commands.overwrite('as', (orig, value, name, options={}) =&gt; {\n  // push alias name to `asLive` array (or remove when live===false)\n    options&amp;&amp;options.live&amp;&amp;!asLive.includes(name)&amp;&amp;asLive.push(name)||options&amp;&amp;options.live===false&amp;&amp;removeFromArray(asLive,name)\n  return orig(value, name)\n})\n</code></pre>\n<h2>A final test script</h2>\n<p>That is it.<br />\nTo see this in action I&#8217;ve prepared a little test script below, you can just save it as a <code>whatever.spec.js</code> in your Cypress integration folder and run it. The test also shows the default &#8216;problem&#8217; as first context and in the second context the not-so-elegant command solutions.</p>\n<pre><code class=\"language-javascript \">const asLive = []\nCypress.Commands.add('getListElements', () =&gt; cy.get('@list').find('li'))\nCypress.Commands.add('updateListElements', () =&gt; cy.get('@list').find('li').as('listElements'))\n\n/**\n * Use regex to find alias name * @param {string} selector\n * @returns {string}\n */\nfunction getAliasName(selector){\n  return (selector.match(/^@(.*)$/)||[])[1]\n}\n\n/**\n * Remove an item from an array * @param {array} array\n * @param {object} item\n * @returns {boolean}\n */\nfunction removeFromArray(array,item){\n  const index = array.indexOf(item)\n  const isInArray = index!==-1\n  isInArray&amp;&amp;array.splice(index, 1)\n  return isInArray\n}\n\n/**\n * Return the element itself if it does not have a documentElement reference * @param {HTMLElement} elm\n * @returns {HTMLElement}\n */\nfunction getDocumentElement(elm) {\n  return elm.documentElement||elm\n}\n\nCypress.Commands.add('updateAlias', (domAlias, options) =&gt; {\n  const aliasName = getAliasName(domAlias)\n  return aliasName&amp;&amp;cy.get(domAlias,{ignoreLive:true}).then($result =&gt; {\n      const tree = [$result]\n      while (tree[0].prevObject) tree.unshift(tree[0].prevObject)\n      return tree.reduce(((cy,o)=&gt;cy.find(o.selector)),cy.wrap(getDocumentElement(tree.shift().get(0)))).as(aliasName)\n  })||cy.get(domAlias, options)\n})\n\nCypress.Commands.overwrite('get', (orig, selector, options={}) =&gt; {\n  const {update, ignoreLive} = options\n  const aliasName = getAliasName(selector)\n  const isLive = aliasName &amp;&amp; !ignoreLive &amp;&amp; asLive.includes(aliasName)\n  return aliasName&amp;&amp;(update||isLive)?cy.updateAlias(selector,options):orig(selector, options)\n})\n\nCypress.Commands.overwrite('as', (orig, value, name, options={}) =&gt; {\n  options&amp;&amp;options.live&amp;&amp;!asLive.includes(name)&amp;&amp;asLive.push(name)||options&amp;&amp;options.live===false&amp;&amp;removeFromArray(asLive,name)\n  return orig(value, name)\n})\n\ndescribe('TestAlias', () =&gt; {\n  beforeEach(() =&gt; cy\n    .get('body').then($body=&gt;$body.get(0).innerHTML=`&lt;main&gt;\n &lt;ul data-list&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;/ul&gt; &lt;ul&gt;${'&lt;li&gt;&lt;/li&gt;'.repeat(99)}&lt;/ul&gt;\n &lt;button onClick=\"document.querySelector('[data-list]').appendChild(document.createElement('li'))\"&gt;add&lt;/button&gt;\n&lt;/main&gt;`)\n    .get('[data-list]').as('list')\n    .get('@list').find('li').as('listElements')\n    .get('@list').find('li').as('listElementsLive', {live: true})\n    .get('button').as('addElement')\n      .log(Cypress)\n  )\n  context('Default implementation', () =&gt; {\n    it('should not get correct amount of elements by alias',() =&gt; cy\n        .get('@listElements').should('have.length',2)\n        .get('@addElement').click()\n        .get('@listElements').should('have.length',2)\n    )\n  })\n  context('Too specific custom commands', () =&gt; {\n    it('should get correct amount of elements by custom command',() =&gt; cy\n        .getListElements().should('have.length',2)\n        .get('@addElement').click()\n        .getListElements().should('have.length',3)\n    )\n    it('should get correct amount of elements by custom command that updates alias',() =&gt; cy\n        .get('@listElements').should('have.length',2)\n        .get('@addElement').click()\n        .updateListElements().should('have.length',3)\n        .get('@listElements').should('have.length',3)\n    )\n  })\n  context('Non specific custom `updateAlias` command', () =&gt; {\n    it('should get correct amount of elements by generic alias update command',() =&gt; cy\n        .get('@addElement').click()\n        .updateAlias('@listElements').should('have.length',3)\n        .get('@listElements').should('have.length',3)\n    )\n  })\n  context('Overwriting `get` and `as` commands', () =&gt; {\n    it('should get correct amount of elements by alias when option.update', () =&gt; cy\n      .get('@listElements').should('have.length', 2)\n      .get('@addElement').click()\n      .get('@listElements',{update:true}).should('have.length', 3)\n    )\n    it('should get correct amount when alias is live', () =&gt; cy\n      .get('@listElementsLive').should('have.length', 2)\n      .get('@addElement').click()\n      .get('@listElementsLive').should('have.length', 3)\n    )\n    it('should not get correct amount when alias-live is disabled along the way', () =&gt; cy\n      .get('@listElementsLive').should('have.length', 2).as('listElementsLive', {live: false})\n      .get('@addElement').click()\n      .get('@listElementsLive').should('have.length', 2)\n    )\n  })\n})\n</code></pre>\n",
    "protected": false
  },
  "excerpt": {
    "rendered": "<p>TLDR: a Cypress command script to update DOM aliases by traversing up the selector tree. Aliasing DOM selections is a really handy Cypress feature. It not only makes your code dryer, it also makes it easier to read. You set it like this cy.get(&#8216;li&#8217;).as(&#8216;entries&#8217;) and further down your code use it like so cy.get(&#8216;@entries&#8217;). That [&hellip;]</p>\n",
    "protected": false
  },
  "author": 2,
  "featured_media": 3472,
  "comment_status": "open",
  "ping_status": "open",
  "sticky": false,
  "template": "",
  "format": "standard",
  "meta": [],
  "categories": [
    5,
    13,
    14,
    26,
    130
  ],
  "tags": [
    111,
    319
  ],
  "terms": {
    "post_tag": [
      {
        "term_id": 111,
        "name": "test",
        "slug": "test",
        "term_group": 0,
        "term_taxonomy_id": 113,
        "taxonomy": "post_tag",
        "description": "",
        "parent": 0,
        "count": 12,
        "filter": "raw",
        "term_order": "0",
        "ID": 111
      },
      {
        "term_id": 319,
        "name": "end to end",
        "slug": "end-to-end",
        "term_group": 0,
        "term_taxonomy_id": 323,
        "taxonomy": "post_tag",
        "description": "",
        "parent": 0,
        "count": 1,
        "filter": "raw",
        "term_order": "0",
        "ID": 319
      }
    ],
    "category": [
      {
        "term_id": 5,
        "name": "code",
        "slug": "code",
        "term_group": 0,
        "term_taxonomy_id": 5,
        "taxonomy": "category",
        "description": "",
        "parent": 170,
        "count": 71,
        "filter": "raw",
        "term_order": "0",
        "ID": 5
      },
      {
        "term_id": 13,
        "name": "Javascript",
        "slug": "javascript",
        "term_group": 0,
        "term_taxonomy_id": 13,
        "taxonomy": "category",
        "description": "",
        "parent": 5,
        "count": 52,
        "filter": "raw",
        "term_order": "0",
        "ID": 13
      },
      {
        "term_id": 14,
        "name": "jQuery",
        "slug": "jquery",
        "term_group": 0,
        "term_taxonomy_id": 14,
        "taxonomy": "category",
        "description": "",
        "parent": 13,
        "count": 16,
        "filter": "raw",
        "term_order": "0",
        "ID": 14
      },
      {
        "term_id": 26,
        "name": "work",
        "slug": "work",
        "term_group": 0,
        "term_taxonomy_id": 26,
        "taxonomy": "category",
        "description": "",
        "parent": 0,
        "count": 16,
        "filter": "raw",
        "term_order": "0",
        "ID": 26
      },
      {
        "term_id": 130,
        "name": "open source",
        "slug": "open-source",
        "term_group": 0,
        "term_taxonomy_id": 139,
        "taxonomy": "category",
        "description": "",
        "parent": 26,
        "count": 7,
        "filter": "raw",
        "term_order": "0",
        "ID": 130
      }
    ]
  },
  "_links": {
    "self": [
      {
        "href": "https://ronvalstar.nl/api/wp/v2/posts/3465"
      }
    ],
    "collection": [
      {
        "href": "https://ronvalstar.nl/api/wp/v2/posts"
      }
    ],
    "about": [
      {
        "href": "https://ronvalstar.nl/api/wp/v2/types/post"
      }
    ],
    "author": [
      {
        "embeddable": true,
        "href": "https://ronvalstar.nl/api/wp/v2/users/2"
      }
    ],
    "replies": [
      {
        "embeddable": true,
        "href": "https://ronvalstar.nl/api/wp/v2/comments?post=3465"
      }
    ],
    "version-history": [
      {
        "count": 6,
        "href": "https://ronvalstar.nl/api/wp/v2/posts/3465/revisions"
      }
    ],
    "predecessor-version": [
      {
        "id": 3471,
        "href": "https://ronvalstar.nl/api/wp/v2/posts/3465/revisions/3471"
      }
    ],
    "wp:featuredmedia": [
      {
        "embeddable": true,
        "href": "https://ronvalstar.nl/api/wp/v2/media/3472"
      }
    ],
    "wp:attachment": [
      {
        "href": "https://ronvalstar.nl/api/wp/v2/media?parent=3465"
      }
    ],
    "wp:term": [
      {
        "taxonomy": "category",
        "embeddable": true,
        "href": "https://ronvalstar.nl/api/wp/v2/categories?post=3465"
      },
      {
        "taxonomy": "post_tag",
        "embeddable": true,
        "href": "https://ronvalstar.nl/api/wp/v2/tags?post=3465"
      }
    ],
    "curies": [
      {
        "name": "wp",
        "href": "https://api.w.org/{rel}",
        "templated": true
      }
    ]
  },
  "featured_media_file": "Vincent_van_Gogh_-_Green_Field_-_Google_Art_Project.jpg"
}