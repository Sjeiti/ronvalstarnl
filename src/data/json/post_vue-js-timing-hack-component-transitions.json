{
  "id": 3319,
  "date": "2017-01-28T07:58:10",
  "date_gmt": "2017-01-28T07:58:10",
  "guid": {
    "rendered": "http://ronvalstar.nl/?p=3319"
  },
  "modified": "2017-01-31T16:02:26",
  "modified_gmt": "2017-01-31T16:02:26",
  "slug": "vue-js-timing-hack-component-transitions",
  "status": "publish",
  "type": "post",
  "link": "https://ronvalstar.nl/vue-js-timing-hack-component-transitions",
  "title": {
    "rendered": "A Vue.js timing hack in component transitions"
  },
  "content": {
    "rendered": "<p>Here&#8217;s a small hack for Vue transitions on child elements.</p>\n<p>Vue transitions are easy as pie: in your HTML element you set the v-transition directive to the name of your transition. And in your CSS you write selectors like <code>.[transitionName]-[enter|leave][-active]</code>. And that&#8217;s it.</p>\n<p>It feels like magic but it&#8217;s actually quite simple.<br />\nVue searches your CSS for the selector <code>.[transitionName]-[enter|leave]</code>. From these selectors it will read the values of <code>transition-time</code> and <code>transition-delay</code>.<br />\nVue now knows how long your transition will last. When the transition occurs it will add the classname <code>.[transitionName]-[enter|leave]</code>. On the n<br />\nnext frame this classname is removed and the classname <code>.[transitionName]-[enter|leave]-active</code> is added. After the transition duration this last one is removed and our transition is done.</p>\n<p>There&#8217;s just one problem. Vue only reads the main classname. So if you are also animating the div in <code>.foo-enter div</code> it has to be within the duration specified in <code>.foo-enter</code>.</p>\n<p>To fix that you can apply a small hack. Simply add a transition to a property that doesn&#8217;t change with the desired time.<br />\nFor instance:</p>\n<pre><code>\r\n.foo-enter {\r\n  transition: left 1000ms ease, cursor 2000ms linear;\r\n}\r\n.foo-enter div {\r\n  transition: opacity 1000ms linear 1000ms;\r\n}\r\n</code></pre>\n<p>That transition on cursor ensures Vue knows the transition lasts 2000ms. We&#8217;re not really animating cursor. So now the div can fade after the main transition has completed.</p>\n<p>Here&#8217;s <a href=\"https://jsfiddle.net/Sjeiti/sqyoxs8d/\">a fiddle</a>.</p>\n",
    "protected": false
  },
  "excerpt": {
    "rendered": "<p>Here&#8217;s a small hack for Vue transitions on child elements. Vue transitions are easy as pie: in your HTML element you set the v-transition directive to the name of your transition. And in your CSS you write selectors like .[transitionName]-[enter|leave][-active]. And that&#8217;s it. It feels like magic but it&#8217;s actually quite simple. Vue searches your [&hellip;]</p>\n",
    "protected": false
  },
  "author": 2,
  "featured_media": 0,
  "comment_status": "open",
  "ping_status": "open",
  "sticky": false,
  "template": "",
  "format": "standard",
  "meta": [],
  "categories": [
    5,
    6,
    13
  ],
  "tags": [
    46,
    302,
    309
  ],
  "terms": {
    "post_tag": [
      {
        "term_id": 46,
        "name": "CSS",
        "slug": "css-2",
        "term_group": 0,
        "term_taxonomy_id": 46,
        "taxonomy": "post_tag",
        "description": "",
        "parent": 0,
        "count": 28,
        "filter": "raw",
        "term_order": "0",
        "ID": 46
      },
      {
        "term_id": 302,
        "name": "Vue",
        "slug": "vue",
        "term_group": 0,
        "term_taxonomy_id": 306,
        "taxonomy": "post_tag",
        "description": "",
        "parent": 0,
        "count": 7,
        "filter": "raw",
        "term_order": "0",
        "ID": 302
      },
      {
        "term_id": 309,
        "name": "transition",
        "slug": "transition",
        "term_group": 0,
        "term_taxonomy_id": 313,
        "taxonomy": "post_tag",
        "description": "",
        "parent": 0,
        "count": 1,
        "filter": "raw",
        "term_order": "0",
        "ID": 309
      }
    ],
    "category": [
      {
        "term_id": 5,
        "name": "code",
        "slug": "code",
        "term_group": 0,
        "term_taxonomy_id": 5,
        "taxonomy": "category",
        "description": "",
        "parent": 170,
        "count": 71,
        "filter": "raw",
        "term_order": "0",
        "ID": 5
      },
      {
        "term_id": 6,
        "name": "CSS",
        "slug": "css",
        "term_group": 0,
        "term_taxonomy_id": 6,
        "taxonomy": "category",
        "description": "",
        "parent": 5,
        "count": 11,
        "filter": "raw",
        "term_order": "0",
        "ID": 6
      },
      {
        "term_id": 13,
        "name": "Javascript",
        "slug": "javascript",
        "term_group": 0,
        "term_taxonomy_id": 13,
        "taxonomy": "category",
        "description": "",
        "parent": 5,
        "count": 52,
        "filter": "raw",
        "term_order": "0",
        "ID": 13
      }
    ]
  },
  "_links": {
    "self": [
      {
        "href": "https://ronvalstar.nl/api/wp/v2/posts/3319"
      }
    ],
    "collection": [
      {
        "href": "https://ronvalstar.nl/api/wp/v2/posts"
      }
    ],
    "about": [
      {
        "href": "https://ronvalstar.nl/api/wp/v2/types/post"
      }
    ],
    "author": [
      {
        "embeddable": true,
        "href": "https://ronvalstar.nl/api/wp/v2/users/2"
      }
    ],
    "replies": [
      {
        "embeddable": true,
        "href": "https://ronvalstar.nl/api/wp/v2/comments?post=3319"
      }
    ],
    "version-history": [
      {
        "count": 6,
        "href": "https://ronvalstar.nl/api/wp/v2/posts/3319/revisions"
      }
    ],
    "predecessor-version": [
      {
        "id": 3327,
        "href": "https://ronvalstar.nl/api/wp/v2/posts/3319/revisions/3327"
      }
    ],
    "wp:attachment": [
      {
        "href": "https://ronvalstar.nl/api/wp/v2/media?parent=3319"
      }
    ],
    "wp:term": [
      {
        "taxonomy": "category",
        "embeddable": true,
        "href": "https://ronvalstar.nl/api/wp/v2/categories?post=3319"
      },
      {
        "taxonomy": "post_tag",
        "embeddable": true,
        "href": "https://ronvalstar.nl/api/wp/v2/tags?post=3319"
      }
    ],
    "curies": [
      {
        "name": "wp",
        "href": "https://api.w.org/{rel}",
        "templated": true
      }
    ]
  }
}