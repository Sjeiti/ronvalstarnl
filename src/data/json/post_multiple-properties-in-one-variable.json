{
  "id": 1826,
  "date": "2013-01-22T14:37:43",
  "date_gmt": "2013-01-22T14:37:43",
  "guid": {
    "rendered": "http://ronvalstar.nl/?p=1826"
  },
  "modified": "2014-05-06T16:24:03",
  "modified_gmt": "2014-05-06T16:24:03",
  "slug": "multiple-properties-in-one-variable",
  "status": "publish",
  "type": "post",
  "link": "https://ronvalstar.nl/multiple-properties-in-one-variable",
  "title": {
    "rendered": "Storing multiple properties in one integer using bitwise AND"
  },
  "content": {
    "rendered": "<p>Objects with multiple properties with each their own variable can get a bit messy. Here&#8217;s a nice solution to store multiple properties in a single variable.</p>\n<p><!--more--> </p>\n<p>Watch:<code data-language=\"javascript\"></p>\n<pre>var ability = {\r\n\tWALK:1\r\n\t,CRAWL:2\r\n\t,RUN:4\r\n\t,FLY:8\r\n\t,SWIM:16\r\n};\r\n\r\nfunction creature(name,abilities){\r\n\treturn {\r\n\t\ttoString: function(){return '[object creature \"'+name+'\"]'}\r\n\t\t,name: name\r\n\t\t,can: function(ability){return !!(ability&abilities)}\r\n\t};\r\n}\r\n\r\nvar humans = creature('humans',ability.WALK|ability.RUN|ability.CRAWL|ability.SWIM);\r\nvar fishes = creature('fishes',ability.SWIM);\r\nvar turtles = creature('turtles',ability.SWIM|ability.CRAWL);\r\nvar pigs = creature('pigs',ability.WALK|ability.SWIM);\r\n\r\nhumans.can(ability.WALK); // returns true\r\nfishes.can(ability.WALK); // returns false\r\nturtles.can(ability.RUN); // returns false\r\npigs.can(ability.FLY); // returns false</pre>\n<p></code></p>\n<p>So the abilities itself are stored in a single private variable, but we can easily test any ability with the creature.can method. Nice huh?</p>\n<h2>Spoiler alert</h2>\n<p>But let me take some of the magic away by explaining what really happens.<br />\nAs you might have noticed the abilities are powers of two (1,2,4,8,16&#8230;). This corresponds to the binary equivalent of the decimal power of ten. The same sequence in binary is: 1,10,100,1000,10000.<br />\nSo adding any of the properties will always result in a unique number: ie the decimal 2 and 8 result in the binary 1010 (the properties are not really added but we&#8217;ll come to that).</p>\n<h2>Bitwise AND</h2>\n<p>The trick lies in the &#038; operator, or bitwise AND. <a href=\"http://en.wikipedia.org/wiki/Bitwise_operation\">Bitwise operations</a> are extremely fast calculations because they are handled directly by the processor.<br />\nBitwise AND compares the binary equivalent of two numbers and returns a new number where the 1&#8217;s coincide. Like this:<br />\n<code data-language=\"javascript\" data-line=\"-1\"></p>\n<pre style=\"font: 24px/30px Inconsolata,courier,monospace;\">0101 & // 5\r\n0011 = // 3\r\n0001   // 1</pre>\n<p></code></p>\n<p>In the example a pig is able walk and swim, so that&#8217;s 1|16=17, which is 10001 in binary. So to test if pigs can fly you&#8217;d do 17&#038;8, which is zero because:<br />\n<code data-language=\"javascript\" data-line=\"-1\"></p>\n<pre style=\"font: 24px/30px Inconsolata,courier,monospace;\">10001 & // 17\r\n01000 = // 8\r\n00000   // 0</pre>\n<p></code></p>\n<h2>Bitwise OR</h2>\n<p>You might also notice that the abilities are added by means of another bitwise operator: the bitwise OR, represented by the pipe sign: |. Bitwise OR is not the same as adding, but we are dealing with powers of two, so in this case it is. Bitwise OR really works like this:<br />\n<code data-language=\"javascript\" data-line=\"-1\"></p>\n<pre style=\"font: 24px/30px Inconsolata,courier,monospace;\">0101 & // 5\r\n0011 = // 3\r\n0111   // 7</pre>\n<p></code></p>\n<h2>Impress your friends</h2>\n<p>So that&#8217;s basically how it works. Fast. Practical in numerous cases (for storing a bunch of checkboxes in a database for instance). Very useful to keep your code clean and minimal (assuming you know how to read bitwise operators, but now you do). Plus looking at the variable &#8216;ability&#8217; alone immediately tells you a great deal about the rest of the code:</p>\n<ul>\n<li>capital properties tells you they are constant, so they don&#8217;t change</li>\n<li>binary sequence tells you the properties are stored as a single variable</li>\n<li>binary sequence also tells you an object can have multiple properties, but only one of each</li>\n</ul>\n<p>There is however a maximum to all this. Bitwise operations in Javascript are done on 32 bit numbers. But that should be more than enough for most.</p>\n",
    "protected": false
  },
  "excerpt": {
    "rendered": "<p>Objects with multiple properties with each their own variable can get a bit messy. Here&#8217;s a nice solution to store multiple properties in a single variable.</p>\n",
    "protected": false
  },
  "author": 2,
  "featured_media": 2398,
  "comment_status": "open",
  "ping_status": "open",
  "sticky": false,
  "template": "",
  "format": "standard",
  "meta": [],
  "categories": [
    5,
    12,
    13,
    28
  ],
  "tags": [],
  "terms": {
    "post_tag": [],
    "category": [
      {
        "term_id": 5,
        "name": "code",
        "slug": "code",
        "term_group": 0,
        "term_taxonomy_id": 5,
        "taxonomy": "category",
        "description": "",
        "parent": 170,
        "count": 71,
        "filter": "raw",
        "term_order": "0",
        "ID": 5
      },
      {
        "term_id": 12,
        "name": "Java",
        "slug": "java",
        "term_group": 0,
        "term_taxonomy_id": 12,
        "taxonomy": "category",
        "description": "",
        "parent": 5,
        "count": 6,
        "filter": "raw",
        "term_order": "0",
        "ID": 12
      },
      {
        "term_id": 13,
        "name": "Javascript",
        "slug": "javascript",
        "term_group": 0,
        "term_taxonomy_id": 13,
        "taxonomy": "category",
        "description": "",
        "parent": 5,
        "count": 52,
        "filter": "raw",
        "term_order": "0",
        "ID": 13
      },
      {
        "term_id": 28,
        "name": "Actionscript",
        "slug": "actionscript",
        "term_group": 0,
        "term_taxonomy_id": 28,
        "taxonomy": "category",
        "description": "",
        "parent": 8,
        "count": 26,
        "filter": "raw",
        "term_order": "0",
        "ID": 28
      }
    ]
  },
  "_links": {
    "self": [
      {
        "href": "https://ronvalstar.nl/api/wp/v2/posts/1826"
      }
    ],
    "collection": [
      {
        "href": "https://ronvalstar.nl/api/wp/v2/posts"
      }
    ],
    "about": [
      {
        "href": "https://ronvalstar.nl/api/wp/v2/types/post"
      }
    ],
    "author": [
      {
        "embeddable": true,
        "href": "https://ronvalstar.nl/api/wp/v2/users/2"
      }
    ],
    "replies": [
      {
        "embeddable": true,
        "href": "https://ronvalstar.nl/api/wp/v2/comments?post=1826"
      }
    ],
    "version-history": [
      {
        "count": 0,
        "href": "https://ronvalstar.nl/api/wp/v2/posts/1826/revisions"
      }
    ],
    "wp:featuredmedia": [
      {
        "embeddable": true,
        "href": "https://ronvalstar.nl/api/wp/v2/media/2398"
      }
    ],
    "wp:attachment": [
      {
        "href": "https://ronvalstar.nl/api/wp/v2/media?parent=1826"
      }
    ],
    "wp:term": [
      {
        "taxonomy": "category",
        "embeddable": true,
        "href": "https://ronvalstar.nl/api/wp/v2/categories?post=1826"
      },
      {
        "taxonomy": "post_tag",
        "embeddable": true,
        "href": "https://ronvalstar.nl/api/wp/v2/tags?post=1826"
      }
    ],
    "curies": [
      {
        "name": "wp",
        "href": "https://api.w.org/{rel}",
        "templated": true
      }
    ]
  }
}