{"id":"2578","date":"2014-04-26T19:37:36","modified":"2017-01-17T12:10:05","slug":"experiment-snow","type":"post","excerpt":"<p>A simple implementation of procedural particle scattering: an infinite field of snow falling upward.</p>","categories":["uncategorized"],"tags":["Perlin Noise","cool shit","experiment","particles"],"metaDescription":"A simple implementation of procedural particle scattering: an infinite field of snow falling upward.","inCv":false,"inPortfolio":false,"dateFrom":"","dateTo":"","title":"Experiment: snow","content":"<p>This might look simple but it is actually a simple implementation of a more complex solution. Normally particles are deterministic. This means a position of a single particle in time can only be determined by extrapolating from it&#8217;s previous position.<br />\nThe particles you see here are procedural: their position in time is predetermined plus their number is infinite.<br />\nYou can check this by dragging left or right which also reverses time. The particles will go in exact reverse, even the ones that were already off-screen.<br />\n<!--more--><br />\nThe technique used for particle scattering is relatively simple. The starting point is a grid. If we take a grid size of ten pixels in a hundred pixel field the number of particles will be around 10&#215;10=100 (or possibly 11&#215;11=121 if you round the edges correctly). The x/y position of each gridpoint will act as seed for a psuedo random number generator. The result is used for offsetting the original point.</p>\n<p><img src=\"http://ronvalstar.nl/wordpress/wp-content/uploads/Artboard-1.png\" alt=\"\" width=\"760\" height=\"400\" class=\"alignnone size-full wp-image-3288\" srcset=\"https://ronvalstar.nl/wordpress/wp-content/uploads/Artboard-1.png 760w, https://ronvalstar.nl/wordpress/wp-content/uploads/Artboard-1-300x158.png 300w\" sizes=\"(max-width: 760px) 100vw, 760px\" /></p>\n<p>In the example I used the prng result as a directional offset: random radians with a fixed radius. You could use the same prng result for a random radius.</p>\n<p>For speed optimisation you can make a lookup table for the sine and cosine calculations. The optimal size of the table is 2*Pi*r.</p>\n<p>Instead of an actual prng I used Perlin noise, which makes the movement possible (and takes multiple arguments). If you need static particle scattering it will be faster to use a regular prng. But you&#8217;ll have to turn the x and y values into a single seed without mirroring the field diagonally (for instance: x+1E6*y).</p>\n<p>Lastly we have to enlarge the gridfield a bit to accommodate for the offset radius. Normally a 100&#215;100 field with a gridsize of 10 wil hold a maximum of 121 points. But with an offset radius points that are normally outside the viewport could suddenly appear inside. So we also enlarge the grid with the offset radius.</p>\n<pre><code data-language=\"javascript\" data-src=\"/wordpress/wp-content/themes/sjeiti/static/experiment/snow.js\"></code></pre>"}